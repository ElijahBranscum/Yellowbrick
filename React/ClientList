import React, { useState, useEffect } from "react";
import debug from "sabio-debug";
import clientService from "services/clientService";
import "./clientlist.css";
import "rc-pagination/assets/index.css";
import Pagination from "rc-pagination";
import locale from "rc-pagination/lib/locale/en_US";
import { Formik, Form, Field } from "formik";
import ClientComponent from "./ClientComponent";
import userService from "services/userService";
import Select from "react-select";
import PropTypes from "prop-types";

function ClientsList(props) {
  const [clients, setClients] = useState({
    clientList: [],
    clientRows: [],
    agentNames: [],
    agentIdSelected: 0,
    filteredClients: [],
    searchedClients: [],
    searchInput: "",
    pageSize: 10,
    totalCount: 0,
    totalSearchCount: 0,
    totalFilterCount: 0,
    currentPage: 1,
    dependencyCount: 0,
    isSearching: false,
    isClientFound: true,
    isFilterActive: false,
    isFilterRendered: false,
    isAdminAdvisor: false,
    isAssignedClients: true,
  });

  const _logger = debug.extend("ClientsList");

  useEffect(() => {
    if (!props.currentUser.roles.includes("Admin")) {
      if (!props.currentUser.roles.includes("Advisor")) {
        handleAgentClientList();
      } else if (props.currentUser.roles.includes("Advisor")) {
        handleAdminAdvisorList();
      }
    } else {
      handleAdminAdvisorList();
    }
  }, [clients.currentPage, clients.searchInput, clients.dependencyCount]);

  const handleAdminAdvisorList = () => {
    if (clients.dependencyCount > 0) {
      clientService
        .getById(
          clients.currentPage - 1,
          clients.pageSize,
          clients.agentIdSelected
        )
        .then(onGetByIdSuccess)
        .catch(onGetByIdError);
    } else if (clients.searchInput !== "") {
      clientService
        .searchByClient(
          clients.currentPage - 1,
          clients.pageSize,
          clients.searchInput
        )
        .then(onSearchSuccess)
        .catch(onSearchError);
    } else {
      clientService
        .selectAll(clients.currentPage - 1, clients.pageSize)
        .then(onSelectAllSuccess)
        .catch(onSelectAllError);
    }
  };

  const handleAgentClientList = () => {
    if (clients.searchInput !== "") {
      clientService
        .searchByClient(
          clients.currentPage - 1,
          clients.pageSize,
          clients.searchInput
        )
        .then(onSearchSuccess)
        .catch(onSearchError);
    } else {
      clientService
        .getById(
          clients.currentPage - 1,
          clients.pageSize,
          props.currentUser.id
        )
        .then(onGetByCurrentIdSuccess)
        .catch(onGetByCurrentIdError);
    }
  };

  const onSelectAllSuccess = (response) => {
    setClients((prevState) => {
      const cList = { ...prevState };
      cList.clientList = response.item.pagedItems;
      cList.clientRows = response.item.pagedItems.map(clientMap);
      cList.totalCount = response.item.totalCount;
      cList.isAdminAdvisor = true;

      return cList;
    });
  };

  const clientMap = (aClient) => {
    return (
      <ClientComponent
        client={aClient}
        useDefaultAvatar={useDefaultAvatar}
        key={aClient.id}
      />
    );
  };

  const onSelectAllError = (err) => {
    _legger("selectAll Failed:", err);
  };

  const onSearchClick = (value) => {
    if (value.query !== "") {
      setClients((prevState) => {
        const setQuery = { ...prevState };
        setQuery.searchInput = value.query;
        setQuery.currentPage = 1;

        return setQuery;
      });
    }
  };

  const onSearchSuccess = (response) => {
    setClients((prevState) => {
      const searchData = { ...prevState };
      searchData.searchedClients = response.item.pagedItems.map(clientMap);
      searchData.totalSearchCount = response.item.totalCount;
      searchData.isSearching = true;
      searchData.isClientFound = true;

      return searchData;
    });
  };

  const onSearchError = (err) => {
    _logger("Search Failed:", err);
    setClients((prevState) => {
      const setToggle = { ...prevState };
      setToggle.isClientFound = false;

      return setToggle;
    });
  };

  const onShowAllClick = (values) => {
    if (values.query) {
      values.query = "";
    }

    setClients((prevState) => {
      const toggle = { ...prevState };
      toggle.isSearching = false;
      toggle.isFilterActive = false;
      toggle.isFilterRendered = false;
      toggle.isClientFound = true;
      toggle.dependencyCount = 0;
      toggle.searchInput = "";
      toggle.currentPage = 1;

      return toggle;
    });
  };

  const onFilterClick = () => {
    if (!clients.isFilterRendered) {
      userService
        .getAllUnpaginated()
        .then(onGetAllSuccess)
        .catch(onGetAllError);
    } else {
      onShowAllClick("filterOff");
    }
  };

  const onGetAllSuccess = (response) => {
    setClients((prevState) => {
      const toggleFilter = { ...prevState };
      toggleFilter.agentNames = response.items.map(agentMap);
      toggleFilter.isFilterActive = !toggleFilter.isFilterActive;
      toggleFilter.isClientFound = true;
      return toggleFilter;
    });
  };

  const agentMap = (agent) => {
    return {
      label: (
        <div className="justify-content-start dropdown-image">
          <img
            src={
              agent.avatarUrl
                ? agent.avatarUrl
                : "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRY5GfGomQwUzWsCqesYfd0TNe6MAg0cnsfiQ&usqp=CAU"
            }
            className="avatarUrl me-2"
            alt="..."
            onError={useDefaultAvatar}
          />
          {agent.mi
            ? `${agent.firstName} ${agent.mi} ${agent.lastName}`
            : `${agent.firstName} ${agent.lastName}`}
        </div>
      ),
      value: [
        agent.id,
        agent.mi
          ? `${agent.firstName} ${agent.mi} ${agent.lastName}`
          : `${agent.firstName} ${agent.lastName}`,
      ],
    };
  };

  const useDefaultAvatar = (e) => {
    e.target.src =
      "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRY5GfGomQwUzWsCqesYfd0TNe6MAg0cnsfiQ&usqp=CAU";
  };

  const onGetAllError = (err) => {
    _logger("getAll Failed:", err);
  };

  const handleSelectChange = (e) => {
    if (e === null) {
      setClients((prevState) => {
        const setAgent = { ...prevState };
        setAgent.agentIdSelected = 0;
        setAgent.isClientFound = true;

        return setAgent;
      });
    } else
      setClients((prevState) => {
        const setAgent = { ...prevState };
        setAgent.agentIdSelected = e.value[0];

        return setAgent;
      });
  };

  const onFilterSubmit = () => {
    if (clients.agentIdSelected !== 0) {
      setClients((prevState) => {
        const runGet = { ...prevState };
        runGet.dependencyCount = ++runGet.dependencyCount;
        runGet.currentPage = 1;

        return runGet;
      });
    }
  };

  const onGetByIdSuccess = (response) => {
    setClients((prevState) => {
      const filter = { ...prevState };
      filter.filteredClients = response.item.pagedItems.map(clientMap);
      filter.totalFilterCount = response.item.totalCount;
      filter.isFilterRendered = true;
      filter.isClientFound = true;

      return filter;
    });
  };

  const onGetByIdError = (err) => {
    _logger("getByAgentName Failed:", err);
    setClients((prevState) => {
      const setToggle = { ...prevState };
      setToggle.isClientFound = false;
      setToggle.dependencyCount = 0;

      return setToggle;
    });
  };

  const onGetByCurrentIdSuccess = (response) => {
    setClients((prevState) => {
      const cList = { ...prevState };
      cList.clientList = response.item.pagedItems;
      cList.clientRows = response.item.pagedItems.map(clientMap);
      cList.totalCount = response.item.totalCount;

      return cList;
    });
  };

  const onGetByCurrentIdError = (err) => {
    _logger("getById Failed:", err);

    setClients((prevState) => {
      const noClients = { ...prevState };
      noClients.isAssignedClients = false;
      return noClients;
    });
  };

  const onPageChange = (page) => {
    setClients((prevState) => {
      const newPage = { ...prevState };
      newPage.currentPage = page;
      return newPage;
    });
  };

  return (
    <div>
      <div className="row">
        <div className="col-lg-12 col-md-12 col-sm-12">
          <div className="border-bottom mb-4 d-md-flex align-items-center justify-content-between">
            <div className="mb-3 mb-md-0">
              <h1 className="mb-1 h2 fw-bold">Client List</h1>

              {clients.isAdminAdvisor && (
                <a className="active maintain-cursor" onClick={onFilterClick}>
                  Filter By Agent
                </a>
              )}
            </div>
            {clients.isFilterActive && clients.isAdminAdvisor ? (
              <div>
                <div className="d-flex align-items-center pt-4">
                  <Select
                    className="basic-single me-2"
                    classNamePrefix="select"
                    placeholder="Select An Agent..."
                    isSearchable={true}
                    isClearable={true}
                    name="agentSelect"
                    options={clients.agentNames}
                    onChange={handleSelectChange}
                    styles={{
                      input: (provided) => ({
                        ...provided,
                        height: "38px",
                        width: "195px",
                      }),
                      control: (baseStyles, state) => ({
                        ...baseStyles,
                        borderColor: state.isFocused ? "#FCC534" : "#e8e7ed",
                        boxShadow: state.isFocused
                          ? "0px 0px 0px 3px #eae7fc"
                          : 0,
                        "&:hover": {
                          borderColor: state.isFocused ? "#FCC534" : 0,
                        },
                      }),
                      placeholder: (provided) => ({
                        ...provided,
                        color: "#b1adc0",
                        marginLeft: "12px",
                        fontSize: "0.875rem",
                      }),
                    }}
                  />
                  <button
                    type="submit"
                    className="btn btn-primary"
                    onClick={onFilterSubmit}
                  >
                    Filter
                  </button>
                  {clients.isFilterRendered && (
                    <button
                      type="reset"
                      className="btn btn-primary ms-2"
                      onClick={() => onShowAllClick("filter")}
                    >
                      Show All
                    </button>
                  )}
                </div>
                {clients.isClientFound ? (
                  <h6>&nbsp;</h6>
                ) : (
                  <h6 className="ms-1 text-danger">
                    No Client Assigned To This Agent
                  </h6>
                )}
              </div>
            ) : (
              <div>
                <Formik
                  enableReinitialize={true}
                  initialValues={{ query: "" }}
                  onSubmit={onSearchClick}
                >
                  {({ values }) => (
                    <Form>
                      <div className="mb-lg-0 pt-4 col-lg-12 col-md-12 col-sm-12 d-flex">
                        <div className="d-flex align-items-center">
                          <Field
                            type="text"
                            name="query"
                            className="form-control me-2"
                            placeholder="Search Client List"
                          />
                          <button type="submit" className="btn btn-primary">
                            Search
                          </button>
                        </div>
                        {clients.isSearching && (
                          <button
                            type="reset"
                            className="btn btn-primary ms-2"
                            onClick={() => onShowAllClick(values)}
                          >
                            Show All
                          </button>
                        )}
                      </div>
                    </Form>
                  )}
                </Formik>
                {clients.isClientFound ? (
                  <h6>&nbsp;</h6>
                ) : (
                  <h6 className="ms-1 text-danger">Client Not Found</h6>
                )}
              </div>
            )}
          </div>
        </div>
      </div>
      {clients.isAssignedClients ? (
        <div className="row">
          <div className="col-lg-12 col-md-12 col-sm-12 ">
            <div className="card bg-white">
              <div className="p-0 card-body">
                <div className="table-responsive">
                  <table
                    role="table"
                    className="text-nowrap table text-center align-middle table-light table-hover maintain-cursor"
                  >
                    <thead className="table-light">
                      <tr role="row">
                        <th colSpan={1} role="columnheader">
                          ID
                        </th>
                        <th colSpan={1} role="columnheader">
                          NAME
                        </th>
                        <th colSpan={1} role="columnheader">
                          EMAIL
                        </th>
                        <th colSpan={1} role="columnheader">
                          PHONE
                        </th>
                        <th colSpan={1} role="columnheader">
                          AGENT
                        </th>
                      </tr>
                    </thead>
                    <tbody role="rowgroup">
                      {clients.isFilterRendered
                        ? clients.filteredClients
                        : clients.isSearching
                        ? clients.searchedClients
                        : clients.clientRows}
                    </tbody>
                  </table>
                </div>
                <div className="active-page inactive-page carat-style hover-color pb-3">
                  <Pagination
                    onChange={onPageChange}
                    current={clients.currentPage}
                    total={
                      clients.isFilterRendered
                        ? clients.totalFilterCount
                        : clients.isSearching
                        ? clients.totalSearchCount
                        : clients.totalCount
                    }
                    pageSize={clients.pageSize}
                    locale={locale}
                    className="text-center"
                  />
                </div>
              </div>
            </div>
          </div>
        </div>
      ) : (
        <div className="card bg-white">
          <h1 className="text-center pt-2"> No Clients Assigned Yet</h1>
        </div>
      )}
    </div>
  );
}

ClientsList.propTypes = {
  currentUser: PropTypes.shape({
    id: PropTypes.number.isRequired,
    roles: PropTypes.arrayOf(PropTypes.string).isRequired,
    email: PropTypes.string.isRequired,
    isLoggedIn: PropTypes.bool.isRequired,
    name: PropTypes.string.isRequired,
    avatarUrl: PropTypes.string.isRequired,
  }).isRequired,
};

export default ClientsList;
